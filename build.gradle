buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar:grgit:1.3.0",
                "org.ajoberstar:gradle-git:1.2.0"

    }
}

apply plugin: 'java'
apply plugin: 'org.ajoberstar.github-pages'

repositories {
    jcenter()
}

dependencies {
    compile("org.mitre.taxii:taxii:1.1.0") {
        exclude group: "net.sf.saxon"
    }
    compile "org.springframework:spring-web:4.2.0.RELEASE"
    compile "org.springframework:spring-oxm:4.2.0.RELEASE"
    compile "org.apache.httpcomponents:httpclient:4.5"

    testCompile "junit:junit:4.12"
    testCompile "org.easytesting:fest-assert:1.4"
}

version = 0.1

test {
    systemProperties = [
            'http.proxyHost' : System.getProperty("http.proxyHost"),
            'https.proxyHost': System.getProperty("https.proxyHost"),
            'http.proxyPort' : System.getProperty("http.proxyPort", "0"),
            'https.proxyPort': System.getProperty("https.proxyPort", "0")
    ]
}

ext {
    ESC = "${(char) 27}"
    CYAN = "${ESC}[36m"
    GREEN = "${ESC}[32m"
    YELLOW = "${ESC}[33m"
    RED = "${ESC}[31m"
    NORMAL = "${ESC}[0m"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

import org.ajoberstar.grgit.Grgit

jar {
    doFirst {
        println "${CYAN}* jar:$NORMAL generating git.properties"
        ant.mkdir(dir: "$buildDir/resources/main")
        File f = new File("$buildDir/resources/main/git.properties")

        if (f.exists()) {
            ant.delete(file: f)
        }

        def grgit = Grgit.open()
        def lastCommit = grgit.log(maxCommits: 1)[0]

        f << """# this file is generated during the build
git.commit.id=$lastCommit.id
git.commit.time=${new Date(new Integer(lastCommit.time).longValue() * 1000)}
git.branch=$grgit.branch.current.name${grgit.status().clean ? '' : ' (with local changes)'}
"""

        println f.text
    }

    manifest {
        attributes("Implementation-Title": "spring-TAXII-contrib (elderberry)",
                "Implementation-version": version)
    }

    from "$buildDir/resources/main/git.properties"
}

githubPages {
    repoUri = "https://github.com/amirkibbar/elderberry.git"
    pages {
        from javadoc
    }
}